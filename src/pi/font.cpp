//
//
//

#include "unix/log.hpp"

#include "font.hpp"

namespace led_d
{
  namespace {
    constexpr auto id_min = 0;
    constexpr auto id_max = 127;

    const matrix_t& empty_symbol ()
    {
      static const matrix_t s_empty;
      return s_empty;
    }

    matrix_t transpose (const matrix_t &src)
    {
      constexpr auto matrix_size = 8;
      if (src.size () != matrix_size)
        return src;

      matrix_t dst (matrix_size, 0xFF);

      uint8_t src_mask = (1 << 0);
      for (auto &dst_byte : dst) {
        uint8_t rotated = 0;
        for (auto src_iter = src.rbegin ();
             src_iter != src.rend (); ++src_iter) {
          rotated <<= 1;
          if (*src_iter & src_mask)
            rotated |= (1 << 0);
        }
        dst_byte = rotated;
        src_mask <<= 1;
      }

      return dst;
    }

  }

  font_t::font_t ()
    : m_data (fill_data ())
  {
  }

  const matrix_t& font_t::get (char s) const
  {
    if (is_basic (s) == true)
      return find_symbol (to_uint32 (s));

    if (m_first_byte == 0) {
      m_first_byte = s;
      return empty_symbol ();
    }

    log_t::buffer_t buf;
    buf << "font: 2-byte symbol"
        << std::hex << (unsigned) m_first_byte
        << " - "
        << std::hex << (unsigned) to_uint8 (s);
    log_t::error (buf);

    // auto &symbol = find_symbol (to_uint32 (m_first_byte, to_uint8 (s)));
    auto &symbol = find_symbol (to_uint32 (to_uint8 (s), m_first_byte));
    m_first_byte = (symbol.empty () == true) ? to_uint8 (s) : 0;
    if (symbol.empty () == true) {
      log_t::buffer_t buf;
      buf << "font: Failed to map 2-byte symbol"
          << std::hex << m_first_byte
          << std::hex << to_uint8 (s);
      log_t::error (buf);
      return find_symbol (to_uint32 ('*'));
    }

    return symbol;
  }

  bool font_t::is_basic (char s)
  {
    return ((s >= id_min) && (s <= id_max)) ? true : false;
  }

  uint8_t font_t::to_uint8 (char s)
  {
    return static_cast<uint8_t>(s);
  }

  uint32_t font_t::to_uint32 (char s)
  {
    return static_cast<uint32_t>(s);
  }

  uint32_t font_t::to_uint32 (uint8_t first, uint8_t second)
  {
    constexpr auto first_mask = 0x1F; // right 5 bits
    constexpr auto second_mask = 0x3F; // right 6 bits
    uint32_t buf = first & first_mask;
    buf <<= 8;
    return buf | (second & second_mask);
  }

  const matrix_t& font_t::find_symbol (unsigned key) const
  {
    auto iter = m_data.find (key);
    if (iter == m_data.end ())
      return empty_symbol ();

    auto ptr = iter->second;

    return *ptr;
  }

  void font_t::basic_symbol_add (map_t &data,
                                 char key, const matrix_t &raw_symbol)
  {
    auto symbol = transpose (raw_symbol);
    auto ptr = std::make_shared<matrix_t>(symbol);
    data.insert (std::make_pair (to_uint32 (key), ptr));
  }

  void font_t::extended_symbol_add (map_t &data, uint8_t first,
                                    uint8_t second, const matrix_t &raw_symbol)
  {
    auto symbol = transpose (raw_symbol);
    auto ptr = std::make_shared<matrix_t>(symbol);
    data.insert (std::make_pair (to_uint32 (first, second), ptr));
  }

  font_t::map_t font_t::fill_data ()
  {
    map_t data;

    auto basic_add = [&data] (char key, const matrix_t &symbol)
      {basic_symbol_add (data, key, symbol);};
    auto extended_add = [&data] (uint8_t first,
                                 uint8_t second, const matrix_t &symbol)
      {extended_symbol_add (data, first, second, symbol);};

    // **************************************************
    basic_add (' ', { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    basic_add ('!', { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00});
    basic_add ('"', { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    basic_add ('#', { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00});
    basic_add ('$', { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00});
    basic_add ('%', { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00});
    basic_add ('&', { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00});
    basic_add ('\'', { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00});
    basic_add ('(', { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00});
    basic_add (')', { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00});
    basic_add ('*', { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00});
    basic_add ('+', { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00});
    basic_add (',', { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06});
    basic_add ('-', { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00});
    basic_add ('.', { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00});
    basic_add ('/', { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00});
    basic_add ('0', { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00});
    basic_add ('1', { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00});
    basic_add ('2', { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00});
    basic_add ('3', { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00});
    basic_add ('4', { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00});
    basic_add ('5', { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00});
    basic_add ('6', { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00});
    basic_add ('7', { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00});
    basic_add ('8', { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00});
    basic_add ('9', { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00});
    basic_add (':', { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00});
    basic_add ('/', { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06});
    basic_add ('<', { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00});
    basic_add ('=', { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00});
    basic_add ('>', { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00});
    basic_add ('?', { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00});
    basic_add ('@', { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00});
    basic_add ('A', { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00});
    basic_add ('B', { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00});
    basic_add ('C', { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00});
    basic_add ('D', { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00});
    basic_add ('E', { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00});
    basic_add ('F', { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00});
    basic_add ('G', { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00});
    basic_add ('H', { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00});
    basic_add ('I', { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00});
    basic_add ('J', { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00});
    basic_add ('K', { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00});
    basic_add ('L', { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00});
    basic_add ('M', { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00});
    basic_add ('N', { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00});
    basic_add ('O', { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00});
    basic_add ('P', { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00});
    basic_add ('Q', { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00});
    basic_add ('R', { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00});
    basic_add ('S', { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00});
    basic_add ('T', { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00});
    basic_add ('U', { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00});
    basic_add ('V', { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00});
    basic_add ('W', { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00});
    basic_add ('X', { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00});
    basic_add ('Y', { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00});
    basic_add ('Z', { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00});
    basic_add ('[', { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00});
    basic_add ('\\', { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00});
    basic_add (']', { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00});
    basic_add ('^', { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00});
    basic_add ('_', { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF});
    basic_add ('`', { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00});
    basic_add ('a', { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00});
    basic_add ('b', { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00});
    basic_add ('c', { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00});
    basic_add ('d', { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00});
    basic_add ('e', { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00});
    basic_add ('f', { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00});
    basic_add ('g', { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F});
    basic_add ('h', { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00});
    basic_add ('i', { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00});
    basic_add ('j', { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E});
    basic_add ('k', { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00});
    basic_add ('l', { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00});
    basic_add ('m', { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00});
    basic_add ('n', { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00});
    basic_add ('o', { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00});
    basic_add ('p', { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F});
    basic_add ('q', { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78});
    basic_add ('r', { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00});
    basic_add ('s', { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00});
    basic_add ('t', { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00});
    basic_add ('u', { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00});
    basic_add ('v', { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00});
    basic_add ('w', { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00});
    basic_add ('x', { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00});
    basic_add ('y', { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F});
    basic_add ('z', { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00});
    basic_add ('{', { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00});
    basic_add ('|', { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00});
    basic_add ('}', { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00});
    basic_add ('~', { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    // **************************************************
    extended_add (0xC3, 0x84, // a-big-umlaut
                  {0x22, 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33});
    extended_add (0xC3, 0xA4, // a-small-umlaut
                  {0x22, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00});
    extended_add (0xC3, 0x96, // o-big-umlaut
                  {0x22, 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C});
    extended_add (0xC3, 0xB6, // o-small-umlaut
                  {0x22, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00});
    extended_add (0xC3, 0x9C, // u-big-umlaut
                  {0x22, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F});
    extended_add (0xC3, 0xBC, // u-small-umlaut
                  {0x22, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00});
    // **************************************************
    
    return data;
  }

  
} // namespace led_d
